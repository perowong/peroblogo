// Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Pero Wong",
            "url": "https://i.overio.space",
            "email": "ynwangpeng@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/comment/add": {
            "post": {
                "description": "Add a comment to first level or second level",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comment"
                ],
                "summary": "Add comment to blog by blog id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token",
                        "name": "Authorization",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "name": "blogID",
                        "in": "query",
                        "required": true
                    },
                    {
                        "maxLength": 600,
                        "minLength": 1,
                        "type": "string",
                        "name": "content",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "fromAvatar",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "fromNickname",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "name": "fromUid",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "name": "parentID",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "replyID",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "toAvatar",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "toNickname",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "toUid",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.AddCommentResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controller.ErrResp"
                        }
                    }
                }
            }
        },
        "/comment/list": {
            "post": {
                "description": "Query blog comments by blog id, if it's null, it returns a []",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comment"
                ],
                "summary": "Query blog comments by blog id",
                "parameters": [
                    {
                        "type": "string",
                        "name": "blogID",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.ListCommentResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controller.ErrResp"
                        }
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "description": "Client get the github code, which makes a deal with userinfo and Token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Login to peroblog via github",
                "parameters": [
                    {
                        "type": "string",
                        "name": "code",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "type",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.LoginResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controller.ErrResp"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controller.AddCommentResp": {
            "type": "object",
            "properties": {
                "ct": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                }
            }
        },
        "controller.ErrCodeType": {
            "type": "integer",
            "enum": [
                0,
                1001,
                1002,
                1003
            ],
            "x-enum-varnames": [
                "ErrCodeOk",
                "ErrCodeParam",
                "ErrCodeServer",
                "ErrCodeToken"
            ]
        },
        "controller.ErrResp": {
            "type": "object",
            "properties": {
                "data": {},
                "errCode": {
                    "$ref": "#/definitions/controller.ErrCodeType"
                },
                "errMsg": {
                    "type": "string"
                }
            }
        },
        "controller.ListCommentResp": {
            "type": "object",
            "properties": {
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Comment"
                    }
                }
            }
        },
        "controller.LoginResp": {
            "type": "object",
            "properties": {
                "Ct": {
                    "type": "string"
                },
                "authType": {
                    "type": "string"
                },
                "avatarUrl": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "nickname": {
                    "type": "string"
                },
                "openID": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "model.Comment": {
            "type": "object",
            "properties": {
                "blogID": {
                    "type": "string"
                },
                "children": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Comment"
                    }
                },
                "content": {
                    "type": "string"
                },
                "ct": {
                    "type": "string"
                },
                "fromAvatar": {
                    "type": "string"
                },
                "fromNickname": {
                    "type": "string"
                },
                "fromUid": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "isTop": {
                    "type": "integer"
                },
                "likes": {
                    "type": "integer"
                },
                "parentID": {
                    "type": "integer"
                },
                "replyID": {
                    "type": "integer"
                },
                "subCount": {
                    "type": "integer"
                },
                "toAvatar": {
                    "type": "string"
                },
                "toNickname": {
                    "type": "string"
                },
                "toUid": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "https://i.overio.space",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Peroblogo Api doc",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
